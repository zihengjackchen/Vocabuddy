{"ast":null,"code":"var _jsxFileName = \"/Users/ziheng/UIUC Courses/SP24/CS411-Vocabuddy/react/src/components/Progress/Progress.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Box } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\naxios.defaults.baseURL = 'http://35.208.70.236/';\nfunction Progress() {\n  _s();\n  const [user, setUser] = useState(null);\n  const [activeTab, setActiveTab] = useState(0); // 0 for GRE, 1 for TOEFL\n  const [recentWords, setRecentWords] = useState([]);\n  const [leastLearnedWords, setLeastLearnedWords] = useState([]);\n  const [progressPercentage, setProgressPercentage] = useState([]);\n  useEffect(() => {\n    // Load user data from session storage\n    const rawData = sessionStorage.getItem('user');\n    if (rawData) {\n      const savedData = JSON.parse(rawData);\n      if (savedData && savedData[0]) {\n        // Ensure savedData is not empty\n        setUser(savedData[0]); // Assuming you want the first item of an array\n      }\n    }\n  }, []);\n\n  // Assume user's email is stored in session storage\n  const email = user.Email;\n  const testId = activeTab === 0 ? 0 : 3;\n  useEffect(() => {\n    const fetchRecentWords = async () => {\n      try {\n        const response = await axios.get(`/api/Learns/recent`, {\n          params: {\n            Email: email,\n            numwords: 10\n          }\n        });\n        setRecentWords(response.data);\n      } catch (error) {\n        console.error('Failed to fetch recent words:', error);\n      }\n    };\n    const fetchLeastLearnedWords = async () => {\n      try {\n        const response = await axios.get(`/api/Learns/least`, {\n          params: {\n            Email: email,\n            TestId: testId,\n            numwords: 10\n          }\n        });\n        setLeastLearnedWords(response.data);\n      } catch (error) {\n        console.error('Failed to fetch least learned words:', error);\n      }\n    };\n    const fetchProgress = async () => {\n      try {\n        const response = await axios.get(`/api/Learns/progress`, {\n          params: {\n            Email: email,\n            TestId: testId\n          }\n        });\n        setProgressPercentage(response.data);\n      } catch (error) {\n        console.error('Failed to fetch progress:', error);\n      }\n    };\n    if (email) {\n      fetchRecentWords();\n      fetchLeastLearnedWords();\n      fetchProgress();\n    }\n  }, [email, testId]);\n  const handleTabChange = (event, newValue) => {\n    setActiveTab(newValue);\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      width: '100%',\n      typography: 'body1',\n      padding: 2\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n_s(Progress, \"E0ekTwsIRtO2ztiklaHsIzK08YE=\");\n_c = Progress;\nexport default Progress;\nvar _c;\n$RefreshReg$(_c, \"Progress\");","map":{"version":3,"names":["React","useState","useEffect","axios","Box","jsxDEV","_jsxDEV","defaults","baseURL","Progress","_s","user","setUser","activeTab","setActiveTab","recentWords","setRecentWords","leastLearnedWords","setLeastLearnedWords","progressPercentage","setProgressPercentage","rawData","sessionStorage","getItem","savedData","JSON","parse","email","Email","testId","fetchRecentWords","response","get","params","numwords","data","error","console","fetchLeastLearnedWords","TestId","fetchProgress","handleTabChange","event","newValue","sx","width","typography","padding","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ziheng/UIUC Courses/SP24/CS411-Vocabuddy/react/src/components/Progress/Progress.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Box, Typography, Tab, Tabs, List, ListItem, ListItemText, Slider } from '@mui/material';\nimport { recent, least, progress } from '../../Types';\n\naxios.defaults.baseURL = 'http://35.208.70.236/';\n\n\n\nfunction Progress() {\n  const [user, setUser] = useState<any>(null);\n  const [activeTab, setActiveTab] = useState(0); // 0 for GRE, 1 for TOEFL\n  const [recentWords, setRecentWords] = useState<recent[]>([]);\n  const [leastLearnedWords, setLeastLearnedWords] = useState<least[]>([]);\n  const [progressPercentage, setProgressPercentage] = useState<progress[]>([]);\n\n\n  useEffect(() => {\n    // Load user data from session storage\n    const rawData = sessionStorage.getItem('user');\n    if (rawData) {\n        const savedData = JSON.parse(rawData);\n        if (savedData && savedData[0]) { // Ensure savedData is not empty\n            setUser(savedData[0]);       // Assuming you want the first item of an array\n        }\n    }\n  }, []);\n\n\n  // Assume user's email is stored in session storage\n  const email = user.Email;\n  const testId = activeTab === 0 ? 0 : 3;\n\n  useEffect(() => {\n    const fetchRecentWords = async () => {\n      try {\n        const response = await axios.get(`/api/Learns/recent`, {\n          params: { Email: email, numwords: 10 }\n        });\n        setRecentWords(response.data);\n      } catch (error) {\n        console.error('Failed to fetch recent words:', error);\n      }\n    };\n\n    const fetchLeastLearnedWords = async () => {\n      try {\n        const response = await axios.get(`/api/Learns/least`, {\n          params: { Email: email, TestId: testId, numwords: 10 }\n        });\n        setLeastLearnedWords(response.data);\n      } catch (error) {\n        console.error('Failed to fetch least learned words:', error);\n      }\n    };\n\n    const fetchProgress = async () => {\n      try {\n        const response = await axios.get(`/api/Learns/progress`, {\n          params: { Email: email, TestId: testId }\n        });\n        setProgressPercentage(response.data);\n      } catch (error) {\n        console.error('Failed to fetch progress:', error);\n      }\n    };\n\n    if (email) {\n      fetchRecentWords();\n      fetchLeastLearnedWords();\n      fetchProgress();\n    }\n  }, [email, testId]);\n\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\n    setActiveTab(newValue);\n  };\n\n  return (\n    <Box sx={{ width: '100%', typography: 'body1', padding: 2 }}>\n      {/* <Typography variant=\"h4\" gutterBottom>\n        Learning Progress Dashboard\n      </Typography>\n      <Tabs value={activeTab} onChange={handleTabChange} centered>\n        <Tab label=\"GRE\" />\n        <Tab label=\"TOEFL\" />\n      </Tabs>\n\n      <Typography variant=\"h6\" gutterBottom>\n        Recently Learned Words\n      </Typography>\n      <List>\n        {recentWords.map((word, index) => (\n          (<ListItem key={index}>\n            <ListItemText primary={word.Word} secondary={`LastLearnedTime: ${word.LastLearnedTime}`} />\n          </ListItem>)\n        ))}\n      </List>\n\n      <Typography variant=\"h6\" gutterBottom>\n        Words to Improve\n      </Typography>\n      <List>\n        {leastLearnedWords.map((word, index) => (\n          <ListItem key={index}>\n            <ListItemText primary={word.Word} secondary={`PercentLearned: ${word.PercentLearned}`}/>\n          </ListItem>\n        ))}\n      </List>\n\n      <Typography variant=\"h6\" gutterBottom>\n        {progressPercentage.map((test, index) => (\n          <ListItem key={index}>\n            <ListItemText primary={test.TestId} secondary={`Progress: ${test.Progress}`}/>\n          </ListItem>\n        ))}\n      </Typography> */}\n    </Box>\n  );\n}\n\nexport default Progress;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}