{"ast":null,"code":"var _jsxFileName = \"/Users/ziheng/UIUC Courses/SP24/CS411-Vocabuddy/react/src/components/Progress/Progress.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\nimport { Box, Typography, Paper, Grid, List, ListItem, ListItemText, ToggleButtonGroup, ToggleButton } from '@mui/material';\nimport { formatDistanceToNow, parseISO } from 'date-fns';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\naxios.defaults.baseURL = 'http://35.208.70.236/';\nfunction Progress() {\n  _s();\n  const [activeTest, setActiveTest] = useState('GRE'); // 'GRE' or 'TOEFL'\n  const [recentWords, setRecentWords] = useState([]);\n  const [leastLearnedWords, setLeastLearnedWords] = useState([]);\n  const [progressPercentage, setProgressPercentage] = useState([]);\n  const {\n    Email\n  } = useParams();\n  useEffect(() => {\n    const testId = activeTest === 'GRE' ? 0 : 3;\n    const fetchData = async () => {\n      try {\n        const [recentRes, leastRes, progressRes] = await Promise.all([axios.get(`/api/Learns/recent`, {\n          params: {\n            Email,\n            num_words: 10\n          }\n        }), axios.get(`/api/Learns/least`, {\n          params: {\n            Email,\n            TestId: testId,\n            num_words: 10\n          }\n        }), axios.get(`/api/Learns/progress`, {\n          params: {\n            Email,\n            TestId: testId\n          }\n        })]);\n        setRecentWords(recentRes.data);\n        setLeastLearnedWords(leastRes.data);\n        setProgressPercentage(progressRes.data);\n      } catch (error) {\n        console.error('Failed to fetch data:', error);\n      }\n    };\n    if (Email) fetchData();\n  }, [Email, activeTest]);\n  const handleTestChange = (event, newTest) => {\n    if (newTest) {\n      setActiveTest(newTest);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      flexGrow: 1,\n      typography: 'body1',\n      padding: 2\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        borderBottom: 1,\n        borderColor: 'divider',\n        marginBottom: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(ToggleButtonGroup, {\n        value: activeTest,\n        exclusive: true,\n        onChange: handleTestChange,\n        children: [/*#__PURE__*/_jsxDEV(ToggleButton, {\n          value: \"GRE\",\n          children: \"GRE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n          value: \"TOEFL\",\n          children: \"TOEFL\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), \"Progress: $\", progressPercentage, \"%\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          elevation: 3,\n          sx: {\n            padding: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            gutterBottom: true,\n            children: \"Recently Learned Words\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(List, {\n            children: recentWords.map((word, index) => /*#__PURE__*/_jsxDEV(ListItem, {\n              sx: {\n                display: 'flex',\n                justifyContent: 'space-between'\n              },\n              children: [/*#__PURE__*/_jsxDEV(ListItemText, {\n                primary: word.Word\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                children: `${formatDistanceToNow(parseISO(word.LastLearnedTime))} ago`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 19\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          elevation: 3,\n          sx: {\n            padding: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            gutterBottom: true,\n            children: \"Words to Improve\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(List, {\n            children: leastLearnedWords.map((word, index) => /*#__PURE__*/_jsxDEV(ListItem, {\n              sx: {\n                display: 'flex',\n                justifyContent: 'space-between'\n              },\n              children: [/*#__PURE__*/_jsxDEV(ListItemText, {\n                primary: word.Word\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                children: `Learned: ${word.PercentLearned}%`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 19\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n_s(Progress, \"klmAdnfl8E0Y+kF9dgm2ZPhGP+A=\", false, function () {\n  return [useParams];\n});\n_c = Progress;\nexport default Progress;\nvar _c;\n$RefreshReg$(_c, \"Progress\");","map":{"version":3,"names":["React","useState","useEffect","axios","useParams","Box","Typography","Paper","Grid","List","ListItem","ListItemText","ToggleButtonGroup","ToggleButton","formatDistanceToNow","parseISO","jsxDEV","_jsxDEV","defaults","baseURL","Progress","_s","activeTest","setActiveTest","recentWords","setRecentWords","leastLearnedWords","setLeastLearnedWords","progressPercentage","setProgressPercentage","Email","testId","fetchData","recentRes","leastRes","progressRes","Promise","all","get","params","num_words","TestId","data","error","console","handleTestChange","event","newTest","sx","flexGrow","typography","padding","children","borderBottom","borderColor","marginBottom","value","exclusive","onChange","fileName","_jsxFileName","lineNumber","columnNumber","container","spacing","item","xs","md","elevation","variant","gutterBottom","map","word","index","display","justifyContent","primary","Word","LastLearnedTime","PercentLearned","_c","$RefreshReg$"],"sources":["/Users/ziheng/UIUC Courses/SP24/CS411-Vocabuddy/react/src/components/Progress/Progress.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\nimport { Box, Typography, Paper, Grid, List, ListItem, ListItemText, ToggleButtonGroup, ToggleButton } from '@mui/material';\nimport { formatDistanceToNow, parseISO } from 'date-fns';\nimport { recent, least, progress } from '../../Types';\n\naxios.defaults.baseURL = 'http://35.208.70.236/';\n\nfunction Progress() {\n  const [activeTest, setActiveTest] = useState<string>('GRE'); // 'GRE' or 'TOEFL'\n  const [recentWords, setRecentWords] = useState<recent[]>([]);\n  const [leastLearnedWords, setLeastLearnedWords] = useState<least[]>([]);\n  const [progressPercentage, setProgressPercentage] = useState<progress[]>([]);\n\n  const { Email } = useParams<{ Email: string }>();\n\n  useEffect(() => {\n    const testId = activeTest === 'GRE' ? 0 : 3;\n\n    const fetchData = async () => {\n      try {\n        const [recentRes, leastRes, progressRes] = await Promise.all([\n          axios.get(`/api/Learns/recent`, { params: { Email, num_words: 10 } }),\n          axios.get(`/api/Learns/least`, { params: { Email, TestId: testId, num_words: 10 } }),\n          axios.get(`/api/Learns/progress`, { params: { Email, TestId: testId } })\n        ]);\n        setRecentWords(recentRes.data);\n        setLeastLearnedWords(leastRes.data);\n        setProgressPercentage(progressRes.data);\n      } catch (error) {\n        console.error('Failed to fetch data:', error);\n      }\n    };\n\n    if (Email) fetchData();\n  }, [Email, activeTest]);\n\n  const handleTestChange = (event: React.MouseEvent<HTMLElement>, newTest: string) => {\n    if (newTest) {\n      setActiveTest(newTest);\n    }\n  };\n\n  return (\n    <Box sx={{ flexGrow: 1, typography: 'body1', padding: 2 }}>\n      <Box sx={{ borderBottom: 1, borderColor: 'divider', marginBottom: 2 }}>\n        <ToggleButtonGroup\n          value={activeTest}\n          exclusive\n          onChange={handleTestChange}\n        >\n          <ToggleButton value=\"GRE\">GRE</ToggleButton>\n          <ToggleButton value=\"TOEFL\">TOEFL</ToggleButton>\n        </ToggleButtonGroup>\n        Progress: ${progressPercentage}%\n      </Box>\n      <Grid container spacing={2}>\n        <Grid item xs={12} md={6}>\n          <Paper elevation={3} sx={{ padding: 2 }}>\n            <Typography variant=\"h6\" gutterBottom>\n              Recently Learned Words\n            </Typography>\n            <List>\n              {recentWords.map((word, index) => (\n                <ListItem key={index} sx={{ display: 'flex', justifyContent: 'space-between' }}>\n                  <ListItemText primary={word.Word} />\n                  <Typography variant=\"body2\">\n                    {`${formatDistanceToNow(parseISO(word.LastLearnedTime))} ago`}\n                  </Typography>\n                </ListItem>\n              ))}\n            </List>\n          </Paper>\n        </Grid>\n        <Grid item xs={12} md={6}>\n          <Paper elevation={3} sx={{ padding: 2 }}>\n            <Typography variant=\"h6\" gutterBottom>\n              Words to Improve\n            </Typography>\n            <List>\n              {leastLearnedWords.map((word, index) => (\n                <ListItem key={index} sx={{ display: 'flex', justifyContent: 'space-between' }}>\n                  <ListItemText primary={word.Word} />\n                  <Typography variant=\"body2\">\n                    {`Learned: ${word.PercentLearned}%`}\n                  </Typography>\n                </ListItem>\n              ))}\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n}\n\nexport default Progress;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}