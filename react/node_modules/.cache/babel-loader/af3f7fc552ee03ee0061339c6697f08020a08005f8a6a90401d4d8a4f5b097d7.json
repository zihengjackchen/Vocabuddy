{"ast":null,"code":"var _jsxFileName = \"/Users/ziheng/UIUC Courses/SP24/CS411-Vocabuddy/react/src/components/Study/Study.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Box, Card, CardContent, Typography, Chip, Button, Grid, Tab, Tabs } from '@mui/material';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Ensure your School type has a non-optional SchoolId of type number\n\nfunction WordsGrid() {\n  _s();\n  const [words, setWords] = useState([]);\n  const navigate = useNavigate();\n  const [user, setUser] = useState(null);\n  const [activeTab, setActiveTab] = useState(0); // 0 for GRE, 1 for TOEFL\n\n  const handleTabChange = (event, newValue) => {\n    setActiveTab(newValue);\n  };\n  useEffect(() => {\n    // Load user data from session storage\n    const rawData = sessionStorage.getItem('user');\n    if (rawData) {\n      const savedData = JSON.parse(rawData);\n      if (savedData && savedData[0]) {\n        // Ensure savedData is not empty\n        setUser(savedData[0]); // Assuming you want the first item of an array\n      }\n    }\n  }, []);\n  useEffect(() => {\n    fetchWords();\n  }, [activeTab]);\n  const fetchWords = async () => {\n    const TestId = activeTab === 0 ? 0 : 3;\n    try {\n      const response = await axios.get('/api/Study', {\n        params: {\n          Email: user.Email,\n          TestId: TestId\n        }\n      });\n      setWords(response.data);\n    } catch (error) {\n      console.error('Failed to fetch words:', error);\n      setWords([]);\n    }\n  };\n  const handleLearnClick = word_progress => {\n    axios.post('/api/Learns/modify', {\n      Email: user.Email,\n      TestId: activeTab === 0 ? 0 : 3,\n      // Assuming TestId is always 0 for learning words\n      WordId: word_progress.WordId,\n      PercentLearned: word_progress.PercentLearned + 10\n    }).then(() => console.log('Learning progress updated')).catch(error => console.error('Failed to update learning progress:', error));\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      width: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Tabs, {\n      value: activeTab,\n      onChange: handleTabChange,\n      centered: true,\n      children: [/*#__PURE__*/_jsxDEV(Tab, {\n        label: \"GRE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tab, {\n        label: \"TOEFL\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      children: words.map(word => /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        lg: 4,\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          height: \"100vh\",\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            sx: {\n              minWidth: 275,\n              maxWidth: 600,\n              mt: 5\n            },\n            children: /*#__PURE__*/_jsxDEV(CardContent, {\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h4\",\n                gutterBottom: true,\n                component: \"div\",\n                color: \"primary\",\n                children: word.Word\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Chip, {\n                label: word.PercentLearned,\n                color: \"secondary\",\n                sx: {\n                  mb: 2\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body1\",\n                gutterBottom: true,\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Description:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 78,\n                  columnNumber: 21\n                }, this), \" \", word.LastLearnedTime]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"contained\",\n                color: \"primary\",\n                onClick: () => handleLearnClick(word),\n                children: \"Learn\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 80,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this)\n      }, word.Word, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_s(WordsGrid, \"S04MWzeTiMXstmiSQucwU9sJSDQ=\", false, function () {\n  return [useNavigate];\n});\n_c = WordsGrid;\nexport default WordsGrid;\nvar _c;\n$RefreshReg$(_c, \"WordsGrid\");","map":{"version":3,"names":["React","useState","useEffect","Box","Card","CardContent","Typography","Chip","Button","Grid","Tab","Tabs","useNavigate","axios","jsxDEV","_jsxDEV","WordsGrid","_s","words","setWords","navigate","user","setUser","activeTab","setActiveTab","handleTabChange","event","newValue","rawData","sessionStorage","getItem","savedData","JSON","parse","fetchWords","TestId","response","get","params","Email","data","error","console","handleLearnClick","word_progress","post","WordId","PercentLearned","then","log","catch","sx","width","children","value","onChange","centered","label","fileName","_jsxFileName","lineNumber","columnNumber","container","spacing","map","word","item","xs","md","lg","display","flexDirection","alignItems","justifyContent","height","minWidth","maxWidth","mt","variant","gutterBottom","component","color","Word","mb","LastLearnedTime","onClick","_c","$RefreshReg$"],"sources":["/Users/ziheng/UIUC Courses/SP24/CS411-Vocabuddy/react/src/components/Study/Study.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Box, Card, CardContent, Typography, Chip, Button, Grid, Tab, Tabs } from '@mui/material';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\n\nimport { word_progress } from '../../Types';  // Ensure your School type has a non-optional SchoolId of type number\n\nfunction WordsGrid() {\n  const [words, setWords] = useState<word_progress[]>([]);\n  const navigate = useNavigate();\n  const [user, setUser] = useState<any>(null);\n  const [activeTab, setActiveTab] = useState(0);  // 0 for GRE, 1 for TOEFL\n\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\n    setActiveTab(newValue);\n  };\n\n  useEffect(() => {\n    // Load user data from session storage\n    const rawData = sessionStorage.getItem('user');\n    if (rawData) {\n        const savedData = JSON.parse(rawData);\n        if (savedData && savedData[0]) { // Ensure savedData is not empty\n            setUser(savedData[0]);       // Assuming you want the first item of an array\n        }\n    }\n  }, []);\n\n  useEffect(() => {\n    fetchWords();\n  }, [activeTab]);\n\n  const fetchWords = async () => {\n    const TestId = activeTab === 0 ? 0 : 3;\n    try {\n      const response = await axios.get('/api/Study', { \n        params: {\n          Email: user.Email, TestId:TestId\n        }\n      });\n      setWords(response.data);\n    } catch (error) {\n      console.error('Failed to fetch words:', error);\n      setWords([]);\n    }\n  };\n\n  const handleLearnClick = (word_progress: word_progress) => {\n\n    axios.post('/api/Learns/modify', {\n      Email: user.Email,\n      TestId: activeTab === 0 ? 0 : 3, // Assuming TestId is always 0 for learning words\n      WordId: word_progress.WordId,\n      PercentLearned: word_progress.PercentLearned + 10\n    })\n      .then(() => console.log('Learning progress updated'))\n      .catch((error) => console.error('Failed to update learning progress:', error));\n  };\n\n  return (\n    <Box sx={{ width: '100%' }}>\n      <Tabs value={activeTab} onChange={handleTabChange} centered>\n        <Tab label=\"GRE\" />\n        <Tab label=\"TOEFL\" />\n      </Tabs>\n      \n      <Grid container spacing={2}>\n        {words.map((word) => (\n          <Grid item key={word.Word} xs={12} md={6} lg={4}>\n            <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\" justifyContent=\"center\" height=\"100vh\">\n              <Card sx={{ minWidth: 275, maxWidth: 600, mt: 5 }}>\n                <CardContent>\n                  <Typography variant=\"h4\" gutterBottom component=\"div\" color=\"primary\">\n                    {word.Word}\n                  </Typography>\n                  <Chip label={word.PercentLearned} color=\"secondary\" sx={{ mb: 2 }} />\n                  <Typography variant=\"body1\" gutterBottom>\n                    <strong>Description:</strong> {word.LastLearnedTime}\n                  </Typography>\n                  <Button variant=\"contained\" color=\"primary\" onClick={() => handleLearnClick(word)}>\n                    Learn\n                  </Button>\n                </CardContent>\n              </Card>\n            </Box>\n          </Grid>\n        ))}\n      </Grid>\n    </Box>\n  );\n}\n\nexport default WordsGrid;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}